/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stylizer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.w3c.dom.Document;
import org.w3c.dom.DOMException;

// For write operation
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;

import java.io.BufferedWriter;
import java.lang.Object;
import org.codehaus.jackson.map.ObjectMapper;

/**
 *
 * @author Debasis
 */
public class Frame_Main {
    static Document document;
    public static String main(String src_file,String rule_file) {
        

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        String indented = new String();
        String finalString = new String();
        //factory.setNamespaceAware(true);
        //factory.setValidating(true);
        try {
            File stylesheet = new File(rule_file);
            File datafile = new File(src_file);
            
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(datafile);
            
            
            // Use a Transformer for output
            TransformerFactory tFactory = TransformerFactory.newInstance();
            StreamSource stylesource = new StreamSource(stylesheet);
            Transformer transformer = tFactory.newTransformer(stylesource);
            
            //System.out.println("====================================================");
            //System.out.println(datafile);
            //System.out.println("=====================================================");
            
            DOMSource source = new DOMSource(document);
            StringWriter writer = new StringWriter();
            StreamResult result = new StreamResult(writer);
            transformer.transform(source, result);
            StringBuffer sb = writer.getBuffer(); 
            finalString = sb.toString();
            
            ObjectMapper mapper = new ObjectMapper();
            Object json = mapper.readValue(finalString, Object.class);
            indented = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json);
            
            System.out.println("====================================================");
            System.out.println(finalString);
            System.out.println("=====================================================");
            
            System.out.println("====================================================");
            System.out.println(indented);
            System.out.println("=====================================================");
            
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            System.out.println("\n** Transformer Factory error");
            System.out.println("   " + tce.getMessage());
            
            // Use the contained exception, if any
            Throwable x = tce;

            if (tce.getException() != null) {
                x = tce.getException();
            }

            x.printStackTrace();
        } catch (TransformerException te) {
            // Error generated by the parser
            System.out.println("\n** Transformation error");
            System.out.println("   " + te.getMessage());

            // Use the contained exception, if any
            Throwable x = te;

            if (te.getException() != null) {
                x = te.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
        return indented;
    } // main
    
}

